<html>
  <head>
    <title>Hello World</title>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <style>

      .title {color: red;}

    </style>

  </head>

  <body>
  
    <div id="root"></div>
    <script type="text/babel">
    
      // const cards = <%- cards %>;
      // const cardList = cards.map((card) => <li key={card}><a href={`/api/detail?name=${card.cardName}`}>{card.cardName}</a></li>);
    
      // const MyApp = (props) => { // what will be rendered will be in this MyApp function

      //   console.log(cards);
        
      //   if (props.name) {
          
      //     return <span>
      //             <h1>Hello, {props.name}!</h1>
      //             {cardList}
      //           </span>;
      //   }
      //   else {
      //     return <h1>Hello, Stranger</h1>;
      //   }
      // } // end of MyApp function

      const Cards = (props) => { // props is an array
        const cardList = props.data.map((card) => 
        <li key={card._id} id={card._id} onClick={props.clickHandler}>
          {card.cardName}
        </li>);

        return <ul>{cardList}</ul>;
      }

      const CardDetail = (props) => { // card detail info display -- field input name must be same as props.item.(insert name)
        return <div>Detail<hr/>

          <form>
            Card Name: <input type="text" name="cardName" onChange={props.handleChange} value={props.item.cardName || ""}  /> <br/>
            Mana cost: <input type="text" name="manaCost" onChange={props.handleChange} value={props.item.manaCost || ""} /> <br/>
            Attack stat: <input type="text" name="attackStat" onChange={props.handleChange} value={props.item.attackStat || ""} /> <br/>
            Defense stat: <input type="text" name="defStat" onChange={props.handleChange} value={props.item.defStat || ""} /> <br/>
          </form>

          <button name="clear" onClick={props.clear}>Clear</button>&nbsp;

          <button name="save" onClick={props.saveItem}>Save</button>&nbsp;

          <button name="delete" onClick={props.deleteItem}>Delete</button>&nbsp;

          </div>;
      }

      class MyApp extends React.Component {
        constructor(props) {
          super(props);
          this.state = {
            items: <%- cards %>,
            currentItem: {}
          };

          this.showDetail = this.showDetail.bind(this);
          this.fieldChange = this.fieldChange.bind(this);
          this.clear = this.clear.bind(this);
          this.saveItem = this.saveItem.bind(this);
          this.deleteItem = this.deleteItem.bind(this);
        } // end of constructor

        showDetail = (event)  => { // on click function to populate the current item object for the state
          let name = event.target.innerText; // gets the name of card that you clicked on
          let newCard = this.state.items.find((item) => item.cardName == name); // finds card object in array in class constructor state
          this.setState({"currentItem": newCard}); // assigns the current item in this.state with new thing
        } // end of showDetail

        fieldChange = (event) => {
          let newItem = this.state.currentItem;
          newItem[event.target.name] = event.target.value;
          this.setState({currentItem: newItem})
        } // end of fieldChange

        clear = () => {
          this.setState({"currentItem": {}}); // resets the fields to nothing
        } // end of clear

        saveItem = () => { // save edits
          console.log(this.state.currentItem);
          
          if (this.state.currentItem == {}) return

          let newItem = this.state.currentItem;

            fetch("/api/add", { // using the broswer built-in fetch method to access routes in the index.js
                method: "POST",
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(newItem)
            })
              .then(res => res.json())
              .then((json) => {
                console.log(json) 

                // if its a new item then add to the list
                if (!this.state.currentItem._id) {
                  newItem._id = json._id;
                  let newList = this.state.items;
                  newList.push(newItem);
                  this.setState({items : newList});
                }

              });
          
        } // end of saveItem

        deleteItem = () => {
          console.log(this.state.currentItem);

          if (this.state.currentItem == {}) return

          fetch(`/api/delete/${this.state.currentItem.cardName}`)
            .then(res => res.json())
            .then((json) => { console.log(json) });
            
        } // end of deleteItem

        render() { // render method that will display the whole html page
          return (<div>  
                    <h2>Card Inventory</h2>
                    <Cards data={this.state.items} clickHandler={this.showDetail} />

                    <CardDetail 
                      item={this.state.currentItem}
                      handleChange={this.fieldChange} 
                      clear={this.clear}
                      saveItem={this.saveItem}
                      deleteItem={this.deleteItem}
                    />
          
                </div>);
        } // end of render

      } // end of MyApp class 

      // const container = document.getElementById('root'); // container gets div with id of root
      // const root = ReactDOM.createRoot(container); // root creates the container as the root DOM
      ReactDOM.render(
        <div><MyApp  /></div>,

      document.getElementById('root')
        
      ); // the user is passing the parameter in function

    </script>
   
  </body>

</html>